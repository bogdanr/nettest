name: Build Linux Binaries with Musl Cross

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag'
        required: false
        default: 'latest'

jobs:
  build-linux-musl:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        targets: x86_64-unknown-linux-musl,aarch64-unknown-linux-musl
        override: true
        
    - name: Install musl cross compiler
      run: |
        # Try alternative sources for musl cross compiler
        wget https://musl.cc/x86_64-linux-musl-cross.tgz || \
        wget https://github.com/richfelker/musl-cross-make/releases/download/v0.9.9/x86_64-linux-musl-cross.tgz || \
        sudo apt-get update && sudo apt-get install -y musl-tools
        if [ -f x86_64-linux-musl-cross.tgz ]; then
          tar -xzf x86_64-linux-musl-cross.tgz
          sudo mv x86_64-linux-musl-cross /opt/
          export PATH="/opt/x86_64-linux-musl-cross/bin:$PATH"
        fi
        
    - name: Add musl targets
      run: |
        rustup target add x86_64-unknown-linux-musl
        rustup target add aarch64-unknown-linux-musl
        
    - name: Setup musl environment
      run: |
        if [ -d "/opt/x86_64-linux-musl-cross" ]; then
          echo "Using downloaded musl cross compiler"
          echo "CC_x86_64_unknown_linux_musl=x86_64-linux-musl-gcc" >> $GITHUB_ENV
          echo "CXX_x86_64_unknown_linux_musl=x86_64-linux-musl-g++" >> $GITHUB_ENV
          echo "AR_x86_64_unknown_linux_musl=x86_64-linux-musl-ar" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr/x86_64-linux-musl" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/x86_64-linux-musl/lib/pkgconfig" >> $GITHUB_ENV
        else
          echo "Using system musl-tools"
          echo "CC_x86_64_unknown_linux_musl=musl-gcc" >> $GITHUB_ENV
          echo "CXX_x86_64_unknown_linux_musl=musl-g++" >> $GITHUB_ENV
          echo "AR_x86_64_unknown_linux_musl=musl-ar" >> $GITHUB_ENV
          echo "PKG_CONFIG_SYSROOT_DIR=/usr" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig" >> $GITHUB_ENV
        fi
        
    - name: Build for x86_64
      env:
        PATH: "/opt/x86_64-linux-musl-cross/bin:$PATH"
        CC_x86_64_unknown_linux_musl: ${{ env.CC_x86_64_unknown_linux_musl || 'x86_64-linux-musl-gcc' }}
        CXX_x86_64_unknown_linux_musl: ${{ env.CXX_x86_64_unknown_linux_musl || 'x86_64-linux-musl-g++' }}
        AR_x86_64_unknown_linux_musl: ${{ env.AR_x86_64_unknown_linux_musl || 'x86_64-linux-musl-ar' }}
        PKG_CONFIG_ALLOW_CROSS: 1
        PKG_CONFIG_SYSROOT_DIR: ${{ env.PKG_CONFIG_SYSROOT_DIR || '/usr/x86_64-linux-musl' }}
        PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH || '/usr/x86_64-linux-musl/lib/pkgconfig' }}
        OPENSSL_STATIC: 1
        OPENSSL_VENDORED: 1
        RUSTFLAGS: "-C target-feature=+crt-static"
        FONTCONFIG_NO_PKG_CONFIG: 0
        RUST_FONTCONFIG_DLOPEN: 0
        FONTCONFIG_STATIC: 0
      run: |
        cargo build --release --target x86_64-unknown-linux-musl
        mkdir -p package/nettest-linux-x86_64
        cp target/x86_64-unknown-linux-musl/release/nettest package/nettest-linux-x86_64/
        cd package
        tar -czf nettest-linux-x86_64.tar.gz nettest-linux-x86_64/
        cd ..
        
    - name: Build for aarch64
      env:
        OPENSSL_STATIC: 1
        OPENSSL_VENDORED: 1
        RUSTFLAGS: "-C target-feature=+crt-static"
        FONTCONFIG_NO_PKG_CONFIG: 0
        RUST_FONTCONFIG_DLOPEN: 0
        FONTCONFIG_STATIC: 0
      run: |
        cargo build --release --target aarch64-unknown-linux-musl
        mkdir -p package/nettest-linux-aarch64
        cp target/aarch64-unknown-linux-musl/release/nettest package/nettest-linux-aarch64/
        cd package
        tar -czf nettest-linux-aarch64.tar.gz nettest-linux-aarch64/
        cd ..
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nettest-linux-musl-binaries
        path: |
          package/*.tar.gz
        retention-days: 30
        
    - name: Create latest release
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: latest
        name: Nettest Latest Release (musl-cross)
        files: package/*.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }}
        overwrite: true
        draft: false
        prerelease: false
        fail_on_unmatched_files: false 